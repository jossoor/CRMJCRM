[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Reservation form",
  "enabled": 1,
  "modified": "2025-01-18 21:17:53.302210",
  "module": "FCRM",
  "name": "Lead made a reservation status",
  "script": "frappe.ui.form.on('Reservation form', {\n  refresh: function(frm) {\n    if (frm._status_updated) return;\n    if(frm.doc.status === 'Made A Reservation') return;\n    // Check if the status is 'Approved' and there is a linked lead (client_name)\n    if (frm.doc.status === 'Approved' && frm.doc.client_name) {\n      frappe.call({\n        method: 'frappe.client.set_value',\n        args: {\n          doctype: 'CRM Lead',\n          name: frm.doc.client_name,\n          fieldname: 'status',\n          value: 'Made A Reservation'\n        },\n        callback: function(response) {\n          if (!response.exc) {\n            frappe.msgprint({\n              message: __('Lead status updated to \"Made A Reservation\"'),\n              indicator: 'green',\n              alert: true\n            });\n\n            frm._status_updated = true;\n          }\n        }\n      });\n    }\n  }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "CRM Lead",
  "enabled": 1,
  "modified": "2025-01-07 17:15:10.959540",
  "module": "FCRM",
  "name": "CRM lead status button",
  "script": "frappe.ui.form.on('CRM Lead', {\n    refresh: function (frm) {\n        // Add a multiselect dropdown in the header\n        frm.add_custom_button('Change Status', () => {\n            frappe.prompt({\n                fieldname: 'status',\n                fieldtype: 'Select',\n                label: 'Change Status',\n                reqd: 1,\n                options: frm.fields_dict.status.df.options.split(\"\\n\").join(\"\\n\"),\n                description: 'Select one or more statuses to update.',\n            }, (values) => {\n                let statuses = values.status.split(\",\");\n                frappe.confirm(\n                    `Are you sure you want to change the status of this Lead to: ${statuses.join(\", \")}?`,\n                    function () {\n                        // Update the lead's status\n                        frm.set_value('status', statuses.join(\", \"));\n                        frm.save_or_update();\n                    }\n                );\n            });\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "CRM Lead",
  "enabled": 1,
  "modified": "2024-12-26 16:18:13.959106",
  "module": "FCRM",
  "name": "Convert to deal",
  "script": "// CRM Lead custom script\nfrappe.ui.form.on('CRM Lead', {\n    refresh: function(frm) {\n        if (!frm.doc.converted) {\n            frm.add_custom_button(__('Convert to Deal'), function() {\n                frappe.call({\n                    method: \"crm.fcrm.doctype.crm_lead.crm_lead.convert_to_deal\",\n                    args: {\n                        lead: frm.doc.name\n                    },\n                    callback: function(response) {\n                        if (response.message) {\n                            frappe.show_alert({\n                                message: __(\"Lead converted to Deal successfully!\"),\n                                indicator: 'green'\n                            });\n                            frm.reload_doc();\n                        }\n                    }\n                });\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "CRM Deal",
  "enabled": 1,
  "modified": "2024-12-30 15:14:03.526112",
  "module": "FCRM",
  "name": "Won Deal",
  "script": "frappe.ui.form.on('CRM Deal', {\n    status: function (frm) {\n        if (frm.doc.status === \"Won\") {\n            // Create a dialog for the \"Deal Is Done\" fields\n            let dialog = new frappe.ui.Dialog({\n                title: __(\"Fill Deal Is Done Details\"),\n                fields: [\n                    {\n                        label: __(\"Property\"),\n                        fieldname: \"property\",\n                        fieldtype: \"Link\",\n                        options: \"Property\",\n                        reqd: 1\n                    },\n                    {\n                        label: __(\"Final Price\"),\n                        fieldname: \"final_price\",\n                        fieldtype: \"Int\",\n                        reqd: 1\n                    },\n                    {\n                        label: __(\"Buyer Commission\"),\n                        fieldname: \"commission\",\n                        fieldtype: \"Int\",\n                    },\n                    {\n                        label: __(\"Seller Commission\"),\n                        fieldname: \"seller_commission\",\n                        fieldtype: \"Int\",\n                    },\n                    {\n                        label: __(\"Sales Person\"),\n                        fieldname: \"sales_person\",\n                        fieldtype: \"Link\",\n                        options: \"User\",\n                        reqd: 1\n                    },\n                    {\n                        label: __(\"Notes\"),\n                        fieldname: \"details\",\n                        fieldtype: \"Long Text\",\n                    }\n                ],\n                primary_action_label: __(\"Submit\"),\n                primary_action(values) {\n                    if (values.property && values.final_price && values.sales_person) {\n                        // Save the data to the \"Deal Is Done\" Doctype\n                        frappe.call({\n                            method: \"frappe.client.insert\",\n                            args: {\n                                doc: {\n                                    doctype: \"Deal Is Done\",\n                                    property: values.property,\n                                    final_price: values.final_price,\n                                    commission: values.commission,\n                                    seller_commission: values.seller_commission,\n                                    sales_person: values.sales_person,\n                                    details: values.notes\n                                }\n                            },\n                            callback: function (response) {\n                                frappe.msgprint({\n                                    message: __(\"CELEBRATE!!\"),\n                                    indicator: \"green\",\n                                    alert: true\n\n                                });\n                                schoolpride();\n                                fireworks();\n                                playSound();\n                                stars();\n                            }\n                        });\n                        dialog.hide();\n                    } else {\n                        frappe.msgprint({\n                            title: __(\"Missing Data\"),\n                            indicator: \"red\",\n                            message: __(\"Please fill all the required fields.\")\n                        });\n                    }\n                }\n            });\n\n            // Show the dialog\n            dialog.show();\n        }\n    }\n});\nfunction fireworks() {\n    var duration = 5 * 1000;\n    var animationEnd = Date.now() + duration;\n    var defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };\n\n    function randomInRange(min, max) {\n      return Math.random() * (max - min) + min;\n    }\n\n    var interval = setInterval(function() {\n      var timeLeft = animationEnd - Date.now();\n\n      if (timeLeft <= 0) {\n        return clearInterval(interval);\n      }\n\n      var particleCount = 50 * (timeLeft / duration);\n      // since particles fall down, start a bit higher than random\n      confetti(Object.assign({}, defaults, { particleCount, origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 } }));\n      confetti(Object.assign({}, defaults, { particleCount, origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 } }));\n    }, 250);\n}\n\nfunction stars() {\n    var defaults = {\n      spread: 360,\n      ticks: 50,\n      gravity: 0,\n      decay: 0.94,\n      startVelocity: 30,\n      colors: ['FFE400', 'FFBD00', 'E89400', 'FFCA6C', 'FDFFB8']\n    };\n    \n    function shoot() {\n      confetti({\n        ...defaults,\n        particleCount: 40,\n        scalar: 1.2,\n        shapes: ['star']\n      });\n    \n      confetti({\n        ...defaults,\n        particleCount: 10,\n        scalar: 0.75,\n        shapes: ['circle']\n      });\n    }\n    \n    setTimeout(shoot, 0);\n    setTimeout(shoot, 100);\n    setTimeout(shoot, 200);\n}\n\nfunction schoolpride() {\n    var end = Date.now() + (15 * 1000);\n\n    // go Buckeyes!\n    var colors = ['#bb0000', '#ffffff'];\n    \n    (function frame() {\n      confetti({\n        particleCount: 2,\n        angle: 60,\n        spread: 55,\n        origin: { x: 0 },\n        colors: colors\n      });\n      confetti({\n        particleCount: 2,\n        angle: 120,\n        spread: 55,\n        origin: { x: 1 },\n        colors: colors\n      });\n    \n      if (Date.now() < end) {\n        requestAnimationFrame(frame);\n      }\n    }());\n}\n\nfunction playSound() {\n    var audio = document.createElement('audio');\n    var uniqueTimestamp = new Date().getTime();\n    const sitePath = frappe.urllib.get_base_url();\n    \n    // Replace this URL with the URL of your uploaded sound file\n    audio.src = sitePath + '/assets/frappe/sounds/cele.mp3?timestamp=' + uniqueTimestamp;\n    \n    // Play the audio\n    audio.play().catch(error => {\n        console.error('Audio playback failed:', error);\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Deal Is Done",
  "enabled": 1,
  "modified": "2024-12-30 18:57:35.417958",
  "module": "FCRM",
  "name": "Winning Celebration",
  "script": "frappe.ui.form.on('Deal Is Done', {\n    after_save: function (frm) {\n        if (!frm.doc.__islocal) {\n            // Trigger fireworks animation\n\n            stars();\n            fireworks();\n            playSound();\n\n            schoolpride();\n            \n            // Display a success message\n            frappe.msgprint({\n                message: __(\"The deal is successfully completed! Celebrate!\"),\n                indicator: \"green\",\n                alert:true\n\n            });\n        }\n    }\n});\n\nfunction playSound() {\n    var audio = document.createElement('audio');\n    var uniqueTimestamp = new Date().getTime();\n    const sitePath = frappe.urllib.get_base_url();\n    \n    // Replace this URL with the URL of your uploaded sound file\n    audio.src = sitePath + '/assets/frappe/sounds/cele.mp3?timestamp=' + uniqueTimestamp;\n    \n    // Play the audio\n    audio.play().catch(error => {\n        console.error('Audio playback failed:', error);\n    });\n}\n\nfunction fireworks() {\n    var duration = 5 * 1000;\n    var animationEnd = Date.now() + duration;\n    var defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };\n\n    function randomInRange(min, max) {\n      return Math.random() * (max - min) + min;\n    }\n\n    var interval = setInterval(function() {\n      var timeLeft = animationEnd - Date.now();\n\n      if (timeLeft <= 0) {\n        return clearInterval(interval);\n      }\n\n      var particleCount = 50 * (timeLeft / duration);\n      // since particles fall down, start a bit higher than random\n      confetti(Object.assign({}, defaults, { particleCount, origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 } }));\n      confetti(Object.assign({}, defaults, { particleCount, origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 } }));\n    }, 250);\n}\n\nfunction stars() {\n    var defaults = {\n      spread: 360,\n      ticks: 50,\n      gravity: 0,\n      decay: 0.94,\n      startVelocity: 30,\n      colors: ['FFE400', 'FFBD00', 'E89400', 'FFCA6C', 'FDFFB8']\n    };\n    \n    function shoot() {\n      confetti({\n        ...defaults,\n        particleCount: 40,\n        scalar: 1.2,\n        shapes: ['star']\n      });\n    \n      confetti({\n        ...defaults,\n        particleCount: 10,\n        scalar: 0.75,\n        shapes: ['circle']\n      });\n    }\n    \n    setTimeout(shoot, 0);\n    setTimeout(shoot, 100);\n    setTimeout(shoot, 200);\n}\n\nfunction schoolpride() {\n    var end = Date.now() + (5 * 1000);\n\n    // go Buckeyes!\n    var colors = ['#bb0000', '#ffffff'];\n    \n    (function frame() {\n      confetti({\n        particleCount: 2,\n        angle: 60,\n        spread: 55,\n        origin: { x: 0 },\n        colors: colors\n      });\n      confetti({\n        particleCount: 2,\n        angle: 120,\n        spread: 55,\n        origin: { x: 1 },\n        colors: colors\n      });\n    \n      if (Date.now() < end) {\n        requestAnimationFrame(frame);\n      }\n    }());\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "CRM Lead",
  "enabled": 0,
  "modified": "2024-11-26 19:39:12.998915",
  "module": "FCRM",
  "name": "Visiting",
  "script": "frappe.ui.form.on('CRM Lead', {\n    status: function (frm) {\n        // Only proceed for specific statuses\n        if (!['Showing', 'Visiting'].includes(frm.doc.status)) return;\n\n        // Prevent double triggering\n        if (frm.doc.__status_checked) return;\n        frm.doc.__status_checked = true;\n\n        frappe.call({\n            method: \"crm.forkanban.check_existing_events\",\n            args: {\n                lead_name: frm.doc.name,\n                lead_status: frm.doc.status\n            },\n            callback: function (response) {\n                if (response.message.exists) {\n                    // Show existing events in a styled table\n                    const events = response.message.events;\n                    const tableHtml = `\n                        <div class=\"event-table-container\">\n                            <table class=\"event-table\">\n                                <thead>\n                                    <tr>\n                                        <th>Subject</th>\n                                        <th>Status</th>\n                                        <th>Starts On</th>\n                                        <th>Sync with Google Calendar</th>\n                                        <th>Google Calendar</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    ${events.map(event => `\n                                        <tr>\n                                            <td>${event.subject}</td>\n                                            <td>${event.status}</td>\n                                            <td>${event.starts_on}</td>\n                                            <td>${event.sync_with_google_calendar ? 'Yes' : 'No'}</td>\n                                            <td>${event.google_calendar || 'N/A'}</td>\n                                        </tr>\n                                    `).join('')}\n                                </tbody>\n                            </table>\n                        </div>\n                    `;\n                    frappe.msgprint(__(`${frm.doc.status} event(s) already exist for this Lead:<br>${tableHtml}`));\n                } else {\n                    // Show a dialog for creating a new event\n                    const dialog = new frappe.ui.Dialog({\n                        title: `Add ${frm.doc.status} Event`,\n                        fields: [\n                            { label: 'Subject', fieldtype: 'Data', fieldname: 'subject', reqd: 1 },\n                            { label: `${frm.doc.status} Description`, fieldtype: 'Small Text', fieldname: 'description' },\n                            { label: 'Starts On', fieldtype: 'Datetime', fieldname: 'starts_on' },\n                            { label: 'Sync with Google Calendar', fieldtype: 'Check', fieldname: 'sync_with_google_calendar' },\n                            { label: 'Google Calendar', fieldtype: 'Link', fieldname: 'google_calendar', options: 'Google Calendar' }\n                        ],\n                        primary_action_label: `Add ${frm.doc.status} Event`,\n                        primary_action(data) {\n                            frappe.call({\n                                method: \"frappe.client.insert\",\n                                args: {\n                                    doc: {\n                                        doctype: 'Event',\n                                        subject: data.subject,\n                                        description: data.description,\n                                        starts_on: data.starts_on,\n                                        sync_with_google_calendar: data.sync_with_google_calendar,\n                                        google_calendar: data.google_calendar,\n                                        reference_doctype: frm.doctype,\n                                        reference_docname: frm.doc.name,\n                                        showing: frm.doc.status === 'Showing' ? 1 : 0,\n                                        visiting: frm.doc.status === 'Visiting' ? 1 : 0\n                                    }\n                                },\n                                callback: function (res) {\n                                    dialog.hide();\n                                    frappe.msgprint(__('Event Added Successfully!'));\n                                }\n                            });\n                        }\n                    });\n                    dialog.show();\n                }\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "CRM Lead",
  "enabled": 0,
  "modified": "2025-01-12 08:38:31.819031",
  "module": "FCRM",
  "name": "Duplicated Lead",
  "script": "frappe.ui.form.on('CRM Lead', {\n    validate: function(frm) {\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'CRM Lead',\n                filters: [\n                    ['phone', '=', frm.doc.phone],\n                    ['name', '!=', frm.doc.name] // Exclude the current document\n                ],\n                fields: ['name', 'duplicated', 'lead_owner'] // Include the owner field for notification\n            },\n            callback: function(response) {\n                if (response.message.length > 0) {\n                    // Update duplicated_label for the existing lead\n                    let existing_lead = response.message[0];\n                    frappe.msgprint({\n                        message: __('Phone number already exists for Lead {0}', [existing_lead.name]),\n                        indicator: 'orange',\n                        alert: true\n                    });\n                    frappe.msgprint({\n                        message: __('Lead Owner is {0}', [existing_lead.lead_owner]),\n                        indicator: 'orange',\n                        alert: true\n                    });\n                    frm.doc.duplicated = 1;\n                    frm.save();\n                }\n            }\n        });\n    }\n});\n",
  "view": "Form"
 }
]